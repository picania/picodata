stages:
  - prebuild
  - build
  - pack
  - deploy

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

variables:
  GIT_DEPTH: 0
  GIT_SUBMODULE_STRATEGY: recursive
  BASE_IMAGE: build-base:latest
  CARGO_INCREMENTAL: 0
  CARGO_HOME: ${CI_PROJECT_DIR}/.cargo
  DOCKER_AUTH_CONFIG: $DOCKER_AUTH_RW
  REGISTRY_IMAGE: docker-public.binary.picodata.io
  RAW_REGISTRY: raw-private

  #
  # See also:
  #   GitLab CI/CD predefined variables
  #   https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
  #
  # CI_COMMIT_SHA: The commit revision the project is built for
  # CI_REGISTRY: The address of the GitLab Container Registry
  # CI_REGISTRY_USER: The username to push containers to the project’s
  #   GitLab Container Registry
  # CI_REGISTRY_PASSWORD: The password to push containers to the project’s
  #   GitLab Container Registry
  # CI_REGISTRY_IMAGE: The address of the project’s Container Registry

docker-build-base:
  stage: prebuild
  image: docker:20
  tags:
    - dind
  rules:
    - # if
      changes:
        - docker-build-base/Dockerfile
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_RW > $HOME/.docker/config.json
  script:
    - docker pull ${REGISTRY_IMAGE}/${BASE_IMAGE} || true
    - >
      docker build
      --pull
      --label GIT_COMMIT=${CI_COMMIT_SHA}
      --cache-from ${REGISTRY_IMAGE}/${BASE_IMAGE}
      -t ${REGISTRY_IMAGE}/${BASE_IMAGE}
      -f ./docker-build-base/Dockerfile
      ./docker-build-base
    - docker push ${REGISTRY_IMAGE}/${BASE_IMAGE}

build:
  image: ${REGISTRY_IMAGE}/${BASE_IMAGE}
  stage: build
  tags:
    - docker
  script:
    # - git submodule foreach --recursive 'git fetch --tags; git describe --always'
    - pushd tarantool-sys; git describe; popd
    - pushd tarantool-sys/third_party/luajit; git describe; popd
    - cargo -V
    - cargo build --locked
    - cargo test --locked
    - cargo fmt -- -v --check
    - cargo clippy --version
    - cargo clippy -- --deny clippy::all
    - PIPENV_VENV_IN_PROJECT=1 PIP_NO_CACHE_DIR=true python3.10 -m pipenv install --deploy
    - pipenv run pytest --numprocesses 2 -v
    - pipenv run lint
  cache:
    paths:
      - target
      - .cargo
      - .venv

build-package-centos-7:
  stage: pack
  tags:
    - shell
  only:
    - web
    - tags
  before_script:
    - git submodule update --init --recursive
    - git clone https://github.com/packpack/packpack.git packpack
    - echo "$GPG_KEY_KDY" | base64 -d > kdy.asc
    - wget https://binary.picodata.io/repository/raw-private/tarantool/.rpmmacros
    - wget https://binary.picodata.io/repository/raw-private/tarantool/rpmmk.patch
    - patch -p0 -i rpmmk.patch
    - sed -i "s/(id -u)/(id -u) -o/g" packpack/packpack
  script:
    - pushd tarantool-sys; VER_TNT=$(git describe --long | sed -n 's/^\([0-9\.]*\)-\([0-9]*\)-\([a-z0-9]*\)/\1.\2/p') ); popd
    - OS=centos DIST=7 PRESERVE_ENVVARS=VER_TNT packpack/packpack
  artifacts:
    paths:
      - build/picodata*.rpm

build-package-ubuntu-jammy:
  tags:
    - shell
  stage: pack
  only:
    - web
    - tags
  before_script:
    - git submodule update --init --recursive
    - git clone https://github.com/packpack/packpack.git packpack
    - git describe --long
  script:
    - pushd tarantool-sys; VER_TNT=$(git describe --long | sed -n 's/^\([0-9\.]*\)-\([0-9]*\)-\([a-z0-9]*\)/\1.\2/p') ); popd
    - OS=ubuntu DIST=jammy PRESERVE_ENVVARS=VER_TNT packpack/packpack
  artifacts:
    paths:
      - build/*.deb

deploy-job-centos7:
  stage: deploy
  tags:
    - shell
  only:
    - web
    - tags
  before_script:
    - eval $(ssh-agent -s)
    - echo "$DEPLOY_PROD_SSH_KEY" | base64 -d | ssh-add -
  script:
    - echo "Deploying rpm-centos7-packet..."
    - scp -o stricthostkeychecking=no build/picodata*rpm ansible@94.26.239.246:/data/nginx/www/packrepo/tarantool-picodata/el/7/x86_64/
    - ssh -o stricthostkeychecking=no ansible@94.26.239.246 "cd /data/nginx/www/packrepo/tarantool-picodata/el/7/ && createrepo --update x86_64 && gpg --no-tty --yes -u kdy@picodata.io --detach-sign --armor x86_64/repodata/repomd.xml"
    - echo "rpm-centos7-packet successfully deployed."

deploy-job-ubuntu-jammy:
  stage: deploy
  tags:
    - shell
  only:
    - web
    - tags
  before_script:
    - eval $(ssh-agent -s)
    - echo "$DEPLOY_PROD_SSH_KEY" | base64 -d | ssh-add -
  script:
    - echo "Deploying deb-packet..."
    - for F in $(find build -name "picodata*deb"); do
    -   wget  --header "Authorization: Basic $RAW_AUTH_RW" --header="Content-type: multipart/form-data boundary=FILEUPLOAD" --post-file $F $RAW_REGISTRY/picodata/$F
    - done
    - echo "deb-packet successfully deployed."
