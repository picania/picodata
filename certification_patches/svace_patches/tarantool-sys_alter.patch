diff --git a/src/box/alter.cc b/src/box/alter.cc
index ce7060c6c..b467e0dc4 100644
--- a/src/box/alter.cc
+++ b/src/box/alter.cc
@@ -1816,6 +1816,8 @@ alter_space_move_indexes(struct alter_space *alter, uint32_t begin,
 					old_def->name, strlen(old_def->name),
 					old_def->type, &old_def->opts,
 					old_def->key_def, alter->pk_def);
+		if (new_def == NULL) /* using if instead of assert for svace */
+			panic("new_def == NULL in %s:%d", __FILE__, __LINE__); //exit(1);
 		index_def_update_optionality(new_def, min_field_count);
 		auto guard = make_scoped_guard([=] { index_def_delete(new_def); });
 		if (!index_def_change_requires_rebuild(old_index, new_def))
@@ -1881,6 +1883,8 @@ update_view_references(struct Select *select, int update_value)
 		if (sql_select_constains_cte(select, space_name))
 			continue;
 		struct space *space = space_by_name(space_name);
+		if (space == NULL) /* using if instead of assert for svace */
+			panic("space == NULL in %s:%d", __FILE__, __LINE__); //exit(1);
 		assert(space->def->view_ref_count > 0 || update_value > 0);
 		space->def->view_ref_count += update_value;
 	}
@@ -2223,6 +2227,9 @@ on_replace_dd_space(struct trigger * /* trigger */, void *event)
 			select_guard.is_active = false;
 		}
 	} else if (new_tuple == NULL) { /* DELETE */
+		if (old_space == NULL) /* using if instead of assert for svace */
+			panic("old_space == NULL in %s:%d", __FILE__, __LINE__); //exit(1);
+
 		if (access_check_ddl(old_space->def->name, old_space->def->id,
 				 old_space->def->uid, BOX_SC_SPACE,
 				 BOX_PRIVILEGE_DROP) != 0)
@@ -3072,6 +3079,8 @@ on_replace_dd_user(struct trigger * /* trigger */, void *event)
 			return -1;
 		txn_stmt_on_rollback(stmt, on_rollback);
 	} else if (new_tuple == NULL) { /* DELETE */
+		if (old_user == NULL) /* using if instead of assert for svace */
+			panic("old_user == NULL in %s:%d", __FILE__, __LINE__); //exit(1);
 		if (access_check_ddl(old_user->def->name, old_user->def->uid,
 				 old_user->def->owner, old_user->def->type,
 				 BOX_PRIVILEGE_DROP) != 0)
@@ -3428,6 +3437,8 @@ on_replace_dd_func(struct trigger * /* trigger */, void *event)
 		if (trigger_run(&on_alter_func, func) != 0)
 			return -1;
 	} else if (new_tuple == NULL) {         /* DELETE */
+		if (old_tuple == NULL || old_func == NULL) /* using if instead of assert for svace */
+			panic("old_tuple == NULL || old_func == NULL in %s:%d", __FILE__, __LINE__); //exit(1);
 		uint32_t uid;
 		if (func_def_get_ids_from_tuple(old_tuple, &fid, &uid) != 0)
 			return -1;
@@ -4510,7 +4521,9 @@ on_replace_dd_sequence(struct trigger * /* trigger */, void *event)
 		sequence_cache_delete(seq->def->id);
 		txn_stmt_on_commit(stmt, on_commit);
 		txn_stmt_on_rollback(stmt, on_rollback);
-	} else {						/* UPDATE */
+	} else { /* UPDATE */
+		if (new_tuple == NULL) /* using if instead of assert for svace */
+			panic("new_tuple == NULL in %s:%d", __FILE__, __LINE__); //exit(1);
 		new_def = sequence_def_new_from_tuple(new_tuple,
 						      ER_ALTER_SEQUENCE);
 		if (new_def == NULL)
