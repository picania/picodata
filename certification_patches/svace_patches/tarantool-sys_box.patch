diff --git a/src/box/box.cc b/src/box/box.cc
index f15001442..a85d9870c 100644
--- a/src/box/box.cc
+++ b/src/box/box.cc
@@ -3349,7 +3349,10 @@ box_select(uint32_t space_id, uint32_t index_id,
 	   bool update_pos, struct port *port)
 {
 	(void)key_end;
-	assert(!update_pos || (packed_pos != NULL && packed_pos_end != NULL));
+	if (!(!update_pos || (packed_pos != NULL && packed_pos_end != NULL)))
+		panic("!(!update_pos || "
+			"(packed_pos != NULL && packed_pos_end != NULL)) "
+			"in %s:%d", __FILE__, __LINE__); // assert
 	assert(packed_pos == NULL || packed_pos_end != NULL);
 
 	rmean_collect(rmean_box, IPROTO_SELECT, 1);
@@ -4292,7 +4295,8 @@ box_process_subscribe(struct iostream *io, const struct xrow_header *header)
 	 * out the id of the instance it has connected to.
 	 */
 	struct replica *self = replica_by_uuid(&INSTANCE_UUID);
-	assert(self != NULL); /* the local registration is read-only */
+	if (self == NULL) /* the local registration is read-only */
+		panic("self == NULL in %s:%d", __FILE__, __LINE__); // assert
 	row.replica_id = self->id;
 	row.sync = header->sync;
 	coio_write_xrow(io, &row);
@@ -5390,7 +5394,8 @@ next_u32_id(uint32_t space_id, uint32_t id_range_end, uint32_t *max_id)
 		return -1;
 	assert(res != NULL);
 	rc = tuple_field_u32(res, 0, max_id);
-	assert(rc == 0);
+	if (rc != 0) // assert
+		panic("rc != 0 in %s:%d", __FILE__, __LINE__);
 	return 0;
 }
 
